#!/bin/bash

# PlaceIntel Pro - Setup Script
# Foursquare Places API Hackathon Project

set -e

echo "üèÜ PlaceIntel Pro - Universal Location Intelligence Platform"
echo "=================================================="
echo "Setting up your winning hackathon project..."
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if required tools are installed
check_requirements() {
    echo -e "${BLUE}Checking requirements...${NC}"
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker is not installed. Please install Docker first.${NC}"
        exit 1
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose is not installed. Please install Docker Compose first.${NC}"
        exit 1
    fi
    
    # Check Go (optional, for local development)
    if command -v go &> /dev/null; then
        echo -e "${GREEN}‚úÖ Go $(go version | cut -d' ' -f3) found${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Go not found (optional for local development)${NC}"
    fi
    
    # Check Python (optional, for local development)
    if command -v python3 &> /dev/null; then
        echo -e "${GREEN}‚úÖ Python $(python3 --version | cut -d' ' -f2) found${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Python3 not found (optional for local development)${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Docker $(docker --version | cut -d' ' -f3 | sed 's/,//') found${NC}"
    echo -e "${GREEN}‚úÖ Docker Compose $(docker-compose --version | cut -d' ' -f3 | sed 's/,//') found${NC}"
    echo ""
}

# Setup environment file
setup_environment() {
    echo -e "${BLUE}Setting up environment...${NC}"
    
    if [ ! -f .env ]; then
        cp .env.example .env
        echo -e "${YELLOW}‚ö†Ô∏è  Created .env file from template${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Please edit .env and add your Foursquare API key${NC}"
        echo ""
        echo -e "${BLUE}To get your Foursquare API key:${NC}"
        echo "1. Visit: https://foursquare.com/developers/signup"
        echo "2. Create a free account"
        echo "3. Create a new app and copy the API key"
        echo "4. Edit .env file and set FOURSQUARE_API_KEY=your_api_key_here"
        echo ""
        read -p "Press Enter after you've added your API key to .env file..."
    else
        echo -e "${GREEN}‚úÖ .env file already exists${NC}"
    fi
    
    # Check if API key is set
    if grep -q "your_foursquare_api_key_here" .env; then
        echo -e "${RED}‚ùå Please set your Foursquare API key in .env file${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Environment configured${NC}"
    echo ""
}

# Build and start services
start_services() {
    echo -e "${BLUE}Building and starting services...${NC}"
    echo "This may take a few minutes on first run..."
    echo ""
    
    # Build and start services
    docker-compose up --build -d
    
    echo ""
    echo -e "${GREEN}‚úÖ Services started successfully!${NC}"
    echo ""
}

# Wait for services to be ready
wait_for_services() {
    echo -e "${BLUE}Waiting for services to be ready...${NC}"
    
    # Wait for API service
    echo "Checking API service..."
    for i in {1..30}; do
        if curl -s http://localhost:8080/api/v1/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ API service is ready${NC}"
            break
        fi
        if [ $i -eq 30 ]; then
            echo -e "${RED}‚ùå API service failed to start${NC}"
            docker-compose logs api
            exit 1
        fi
        sleep 2
    done
    
    # Wait for Intelligence service
    echo "Checking Intelligence service..."
    for i in {1..30}; do
        if curl -s http://localhost:5000/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Intelligence service is ready${NC}"
            break
        fi
        if [ $i -eq 30 ]; then
            echo -e "${RED}‚ùå Intelligence service failed to start${NC}"
            docker-compose logs intelligence
            exit 1
        fi
        sleep 2
    done
    
    echo ""
}

# Test the API
test_api() {
    echo -e "${BLUE}Testing API endpoints...${NC}"
    
    # Test health endpoint
    echo "Testing health endpoint..."
    if curl -s http://localhost:8080/api/v1/health | grep -q "healthy"; then
        echo -e "${GREEN}‚úÖ Health check passed${NC}"
    else
        echo -e "${RED}‚ùå Health check failed${NC}"
        exit 1
    fi
    
    # Test search endpoint with sample data
    echo "Testing search endpoint..."
    SEARCH_RESULT=$(curl -s "http://localhost:8080/api/v1/places/intelligence?lat=40.7128&lng=-74.0060&query=coffee&limit=1")
    if echo "$SEARCH_RESULT" | grep -q "results"; then
        echo -e "${GREEN}‚úÖ Search endpoint working${NC}"
    else
        echo -e "${RED}‚ùå Search endpoint failed${NC}"
        echo "Response: $SEARCH_RESULT"
        exit 1
    fi
    
    echo ""
}

# Show success message and next steps
show_success() {
    echo -e "${GREEN}üéâ PlaceIntel Pro is now running successfully!${NC}"
    echo ""
    echo -e "${BLUE}üöÄ Access your application:${NC}"
    echo "‚Ä¢ API Documentation: http://localhost:8080/docs"
    echo "‚Ä¢ Demo Application: Open examples/demo.html in your browser"
    echo "‚Ä¢ API Health Check: http://localhost:8080/api/v1/health"
    echo "‚Ä¢ Intelligence Service: http://localhost:5000/health"
    echo ""
    echo -e "${BLUE}üìä Sample API Endpoints:${NC}"
    echo "‚Ä¢ Search Places: GET http://localhost:8080/api/v1/places/intelligence?lat=40.7128&lng=-74.0060&query=coffee"
    echo "‚Ä¢ Place Details: GET http://localhost:8080/api/v1/places/{place_id}/details"
    echo "‚Ä¢ Popular Places: GET http://localhost:8080/api/v1/analytics/popular?lat=40.7128&lng=-74.0060"
    echo ""
    echo -e "${BLUE}üõ†Ô∏è  Development Commands:${NC}"
    echo "‚Ä¢ View logs: docker-compose logs -f"
    echo "‚Ä¢ Stop services: docker-compose down"
    echo "‚Ä¢ Restart services: docker-compose restart"
    echo "‚Ä¢ Rebuild services: docker-compose up --build"
    echo ""
    echo -e "${YELLOW}üí° Hackathon Tips:${NC}"
    echo "‚Ä¢ The demo.html file showcases all three intelligence pillars"
    echo "‚Ä¢ API responses include processing times and data sources"
    echo "‚Ä¢ All services are containerized for easy deployment"
    echo "‚Ä¢ Redis caching improves performance for repeated requests"
    echo ""
    echo -e "${GREEN}üèÜ Ready to win the hackathon! Good luck!${NC}"
}

# Main execution
main() {
    check_requirements
    setup_environment
    start_services
    wait_for_services
    test_api
    show_success
}

# Handle script interruption
trap 'echo -e "\n${RED}Setup interrupted. Cleaning up...${NC}"; docker-compose down; exit 1' INT

# Run main function
main